# Template file used to generate the configuration (YAML) for the collector
############
# Collector's YAML format
#   Root level keys
#       arguments
#       commands
#   Commands are list items. Command names label the command output.
#   Required command attributes:
#       command - will be executed by bash
#   Optional command attributes:
#       superuser - bool indicates need for elevated privilege (default: false)
#       run - bool indicates if command will be run (default: true)
#       modprobe - comma separated list of kernel modules required to run command
#       idle - bool indicates if system cpu idle percentage should be collected before running command (default: false)
#       parallel - bool indicates if command can be run in parallel with other commands (default: false)
#   Runtime values are provided by the collector at runtime on target.
#       $NIC - command will be called for all physical network interfaces
###########

############
# global arguments
############
arguments:
    name: 
    bin_path: 
############
# commands --
############
commands:
- date -u:
    command: date -u
    parallel: true
- lscpu:
    command: lscpu
    parallel: true
- cpuid -1:
    command: cpuid -1
    modprobe: cpuid
    parallel: true
- max_cstate:
    command: |-
        cat /sys/module/intel_idle/parameters/max_cstate
    parallel: true
- cpu_freq_driver:
    command: |-
        cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver
    parallel: true
- cpu_freq_governor:
    command: |-
        cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    parallel: true
- base frequency:
    command: cat /sys/devices/system/cpu/cpu0/cpufreq/base_frequency
    parallel: true
- maximum frequency:
    command: cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq
    parallel: true
- lsblk -r -o:
    command: lsblk -r -o NAME,MODEL,SIZE,MOUNTPOINT,FSTYPE,RQ-SIZE,MIN-IO -e7 -e1
    parallel: true
- df -h:
    command: df -h
    parallel: true
- uname -a:
    command: uname -a
    parallel: true
- ps -eo:
    command: ps -eo pid,ppid,%cpu,%mem,rss,command --sort=-%cpu,-pid | grep -v ] | head -n 20
    parallel: false
- irqbalance:
    command: pgrep irqbalance
    parallel: true
- /proc/cpuinfo:
    command: cat /proc/cpuinfo
    parallel: true
- /proc/meminfo:
    command: cat /proc/meminfo
    parallel: true
- transparent huge pages:
    command: cat /sys/kernel/mm/transparent_hugepage/enabled
    parallel: true
- automatic numa balancing:
    command: cat /proc/sys/kernel/numa_balancing
    parallel: true
- /etc/*-release:
    command: cat /etc/*-release
    parallel: true
- gcc version:
    command: gcc --version
    parallel: true
- binutils version:
    command: ld -v
    parallel: true
- glibc version:
    command: ldd --version
    parallel: true
- python version:
    command: python --version 2>&1
    parallel: true
- python3 version:
    command: python3 --version
    parallel: true
- java version:
    command: java -version
    parallel: true
- openssl version:
    command: openssl version
    parallel: true
- uncore cha count:
    command: rdmsr 0x702
    superuser: true
    modprobe: msr
    parallel: true
- uncore client cha count:
    command: rdmsr 0x396
    superuser: true
    modprobe: msr
    parallel: true
- uncore cha count spr:
    command: rdmsr 0x2FFE
    superuser: true
    modprobe: msr
    parallel: true
- dmidecode:
    command: dmidecode
    superuser: true
    parallel: true
- lshw:
    command: lshw -businfo -numeric
    superuser: true
    parallel: true
- spectre-meltdown-checker:
    command: spectre-meltdown-checker.sh --batch text
    superuser: true
    parallel: true
- rdmsr 0x1a4:
    command: rdmsr -f 3:0 0x1a4  # MSR_MISC_FEATURE_CONTROL: L2 and DCU Prefetcher enabled/disabled
    superuser: true
    modprobe: msr
    parallel: true
- rdmsr 0x1b0:
    command: rdmsr -f 3:0 0x1b0  # IA32_ENERGY_PERF_BIAS: Performance Energy Bias Hint (0 is highest perf, 15 is highest energy saving)
    superuser: true
    modprobe: msr
    parallel: true
- rdmsr 0x1ad:
    command: rdmsr 0x1ad  # MSR_TURBO_RATIO_LIMIT: Maximum Ratio Limit of Turbo Mode
    superuser: true
    modprobe: msr
    parallel: true
- rdmsr 0x1ae:
    command: rdmsr 0x1ae  # MSR_TURBO_GROUP_CORE_CNT: Group Size of Active Cores for Turbo Mode Operation
    superuser: true
    modprobe: msr
    parallel: true
- rdmsr 0x4f:
    command: rdmsr -a 0x4f  # MSR_PPIN: Protected Processor Inventory Number
    superuser: true
    modprobe: msr
    parallel: true
- rdmsr 0x610:
    command: rdmsr -f 14:0 0x610  # MSR_PKG_POWER_LIMIT: Package limit in bits 14:0
    superuser: true
    modprobe: msr
    parallel: true
- ipmitool sel time get:
    command: LC_ALL=C ipmitool sel time get
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
- ipmitool sel elist:
    command: LC_ALL=C ipmitool sel elist | tail -n20 | cut -d'|' -f2-
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
- ipmitool chassis status:
    command: LC_ALL=C ipmitool chassis status
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
- ipmitool sdr list full:
    command: LC_ALL=C ipmitool sdr list full
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
- dmesg:
    command: dmesg --kernel --human --nopager | tail -n20
    superuser: true
    parallel: true
- msrbusy:
    command: msrbusy 0x30a 0x309 0x30b 0x30c 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8
    superuser: true
    modprobe: msr
    parallel: true
############
# The commands below use a variable ($NIC) that has a handler implemented in the 
# collector. The commands are executed one time for each NIC on the target.
############
- ethtool $NIC:
    command: ethtool $NIC
    superuser: true
    parallel: true
- ethtool -i $NIC:
    command: ethtool -i $NIC
    superuser: true
    parallel: true
- MAC Address $NIC:
    command: cat /sys/class/net/$NIC/address
    parallel: true
- numa node $NIC:
    command: cat /sys/class/net/$NIC/device/numa_node
    parallel: true
- irq cpu affinity $NIC:
    command: |-
        intlist=$( grep -e "$NIC" /proc/interrupts | cut -d':' -f1 | sed -e 's/^[[:space:]]*//' )
        for int in $intlist; do
            cpu=$( cat /proc/irq/"$int"/smp_affinity_list )
            printf "%s:%s;" "$int" "$cpu"
        done
        printf "\n"
    superuser: true
    parallel: true
############
# The commands below use a variable ($DRIVE) that has a handler implemented in the 
# collector. The commands are executed one time for each DRIVE on the target.
############
- hdparm $DRIVE:
    command: hdparm -i /dev/$DRIVE
    superuser: true
    parallel: true
############
# Micro-benchmark commands below.
############
- Memory MLC Loaded Latency Test:
    run: false
    command: |-
        # measure memory loaded latency
        mlc --loaded_latency
    superuser: true
    idle: true
- Memory MLC Bandwidth:
    run: false
    command: |-
        # measure memory bandwidth matrix
        mlc --bandwidth_matrix
    superuser: true
    idle: true
- stress-ng cpu methods:
    run: false
    command: |-
        # measure cpu performance
        methods=$( stress-ng --cpu 1 --cpu-method x 2>&1 | cut -d":" -f2 | cut -c 6- )
        for method in $methods; do
            printf "%s " "$method"
            stress-ng --cpu 0 -t 1 --cpu-method "$method" --metrics-brief 2>&1 | tail -1 | awk '{print $9}'
        done
    idle: true
- Measure Turbo Frequencies:
    run: false
    command: |-
        # measure turbo frequencies using calcfreq utility
        num_vcpus=$(lscpu | grep 'CPU(s):' | head -1 | awk '{print $2}')
        threads_per_core=$(lscpu | grep 'Thread(s) per core:' | head -1 | awk '{print $4}')
        num_sockets=$(lscpu | grep 'Socket(s):' | head -1 | awk '{print $2}')
        num_cores=$((num_vcpus / threads_per_core))
        num_cores_per_socket=$((num_cores / num_sockets))
        # if the first two 'core ids' from /proc/cpuinfo are the same then use -a1 option
        cpu_0_core_id=$(grep 'core id' /proc/cpuinfo | head -1 | awk '{print $4}')
        cpu_1_core_id=$(grep 'core id' /proc/cpuinfo | head -2 | tail -1 | awk '{print $4}')
        if [ "$cpu_0_core_id" -eq "$cpu_1_core_id" ]; then
            calcfreq_option="-a1"
        fi
        calcfreq -t"$num_cores_per_socket" "$calcfreq_option"
    superuser: true
    modprobe: msr
    idle: true
- CPU Turbo Test:
    run: false
    command: |-
        # measure tdp and all-core turbo frequency
        ((turbostat -i 2 2>/dev/null &) ; stress-ng --cpu 1 -t 9s 2>&1 ; stress-ng --cpu 0 -t 5s 2>&1 ; pkill -9 -f turbostat) | awk '$0~"stress" {print $0} $1=="Package" || $1=="CPU" || $1=="Core" || $1=="Node" {if(f!=1) print $0;f=1} $1=="-" {print $0}'
    superuser: true
    modprobe: msr
    idle: true
- CPU Idle:
    run: false
    command: |-
        # measure TDP at idle using turbostat
        turbostat --show PkgWatt -n 1 | sed -n 2p
    superuser: true
    modprobe: msr
    idle: true
- fio:
    run: false
    command: |-
        # measure storage performance
        file_dir=
        file_name="fio_file"
        file_size_g=4
        runtime=30
        if [[ -d "$file_dir" && -w "$file_dir" ]]; then
            available_space=$(df -hP "$file_dir")
            count=$(echo "$available_space" | awk '/[0-9]%/{print substr($4,1,length($4)-1)}')
            unit=$(echo "$available_space" | awk '/[0-9]%/{print substr($4,length($4),1)}')
            if [[ "$unit" == "G"  &&  $(awk -v c=$count -v f=$file_size_g 'BEGIN{print (c>f)?1:0}') == 1 ]] || (echo "TPEZY" | grep -F -q "$unit" ); then
                fio --randrepeat=1 --ioengine=sync --direct=1 --gtod_reduce=1 --name=test --filename="$file_dir"/"$file_name" --runtime=$runtime --bs=4k --iodepth=64 --size="$file_size_g"G --readwrite=randrw --rwmixread=75
                rm "$file_dir"/"$file_name"
            else
                echo "$file_dir does not have enough available space - $file_size_g Gigabytes required"
            fi
        else
            echo "$file_dir does not exist or is not writeable"
        fi
    idle: true
- profile:
    run: false
    command: |-
        # capture system profile
        frequency=
        samples=
        mpstat -u -T -I SCPU -P ALL $frequency $samples > mpstat.out &
        iostat -d -t $frequency $samples > iostat.out &
        sar -n DEV $frequency $samples > sar.out
        sleep 2
        echo "########## mpstat ##########"
        cat mpstat.out
        echo "########## iostat ##########"
        cat iostat.out
        echo "##########  sar   ##########"
        cat sar.out
